clc
clear all
close all
% disp('Press any key to initialize Input Output Vector')
% pause
%% creating input and output variable:
Number_of_sample=3000;
Delta_T=0.9;
[Time,Discrete_System_Transfer,Step_Input,Impulse_Input,measured_input,measured_Output,Real_Output] =...
    initialize(Number_of_sample,Delta_T);
Discrete_System_Transfer
pole(Discrete_System_Transfer)'
zero(Discrete_System_Transfer)'
figure
plot(measured_Output-Real_Output)
hold on
plot(Real_Output)
% disp('Press any key to see result of IGLS method')
% pause
%% Neural Network:
inputs=Unbyp(measured_input,Real_Output).';
targets=Real_Output.';
% Choose a Training Function
net.trainFcn = 'trainbr';  % Bayesin regulation backpropagation.
hiddenLayerSize = [14,12];
net = fitnet(hiddenLayerSize);
% Choose Input and Output Pre/Post-Processing Functions
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
net.performFcn = 'mse';  % Mean Squared Error
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};
net.trainParam.showWindow=true;
net.trainParam.showCommandLine=false;
net.trainParam.show=1;
net.trainParam.epochs=500;
net.trainParam.goal=1e-30;
net.trainParam.max_fail=20;
% Train the Network
[net,tr] = train(net,inputs,targets);
% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);
%% impulse response:
NN_out=[];
NN_out(1)=net([0 0 0 0 Impulse_Input(1) 0 0 0]');
NN_out(2)=net([-NN_out(1) 0 0 0 Impulse_Input(2) Impulse_Input(1) 0 0]');
NN_out(3)=net([-NN_out(2) -NN_out(1) 0 0 Impulse_Input(3) Impulse_Input(2) Impulse_Input(1) 0]');
NN_out(4)=net([-NN_out(3) -NN_out(2) -NN_out(1) 0 Impulse_Input(4) Impulse_Input(3) Impulse_Input(2) Impulse_Input(1)]');
%
for i=6:Number_of_sample
    NN_out(i)=net([-NN_out(i-1) -NN_out(i-2) -NN_out(i-3) -NN_out(i-4) 0 0 0 0]');
end
%
figure,
out=impulse(Discrete_System_Transfer)
plot(out)
hold on
plot(NN_out(1:length(out)))
